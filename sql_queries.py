import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')
ARN = config.get('IAM_ROLE', 'ARN')
LOG_DATA = config.get('S3', 'LOG_DATA')
SONG_DATA = config.get('S3', 'SONG_DATA')
LOG_JSONPATH = config.get('S3', 'LOG_JSONPATH')

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS stage_events;"
staging_songs_table_drop = "DROP TABLE IF EXISTS stage_songs;"
songplay_table_drop = "DROP TABLE IF EXISTS songplays;"
user_table_drop = "DROP TABLE IF EXISTS users;"
song_table_drop = "DROP TABLE IF EXISTS songs;"
artist_table_drop = "DROP TABLE IF EXISTS artists;"
time_table_drop = "DROP TABLE IF EXISTS times;"

# CREATE TABLES

staging_events_table_create= ("""CREATE TABLE IF NOT EXISTS stage_events (artist varchar, auth varchar,
                                 FirstName varchar,gender varchar, IteminSession int, lastName varchar,
                                 length varchar, level varchar, location varchar, method varchar, 
                                 page varchar, registration varchar,sessionId int, song varchar, 
                                 status int, ts bigint, userAgent varchar , userId int);
                              """)


staging_songs_table_create = ("""CREATE TABLE IF NOT EXISTS stage_songs (artist_id varchar, 
                                 artist_lattitude decimal, artist_location varchar, 
                                 artist_longitude decimal, artist_name varchar, duration decimal, 
                                 num_songs int, song_id varchar, title varchar, year int);
                              """)

songplay_table_create = ("""CREATE TABLE IF NOT EXISTS songplays (songplay_id bigint 
                            GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, start_time timestamp NOT NULL, 
                            user_id int NOT NULL, level char(4), song_id varchar(100), 
                            artist_id varchar(100),session_id int NOT NULL, location varchar(100),
                            user_agent text);
                         """)

user_table_create = ("""CREATE TABLE IF NOT EXISTS users (user_id int PRIMARY KEY, 
                        first_name varchar(50), last_name varchar(50),
                        gender char(1), level char(4));
                     """)

song_table_create = ("""CREATE TABLE IF NOT EXISTS songs (song_id varchar PRIMARY KEY, tittle varchar, 
                        artist_id varchar, year int, duration int);
                     """)

artist_table_create = ("""CREATE TABLE IF NOT EXISTS artists (artist_id varchar PRIMARY KEY,
                          name varchar, location varchar, lattitude decimal, longitude decimal);
                        """)

time_table_create = ("""CREATE TABLE IF NOT EXISTS times (start_time timestamp PRIMARY KEY, 
                        hour int, day int, week int, month int, year int, weekday int);
                     """)

# STAGING TABLES

staging_events_copy = ("""COPY stage_events FROM {}
                        CREDENTIALS 'aws_iam_role={}'
                        region 'us-west-2'
                        JSON {};
                        """).format(LOG_DATA, ARN, LOG_JSONPATH)

staging_songs_copy = ("""COPY stage_songs FROM {}
                        CREDENTIALS 'aws_iam_role={}'
                        region 'us-west-2'
                        JSON 'auto';
                        """).format(SONG_DATA, ARN)

# FINAL TABLES
songplay_table_insert = ("""INSERT INTO songplays (start_time, user_id, level,
                            song_id, artist_id, session_id, location, 
                            user_agent) 
                            SELECT (TIMESTAMP 'epoch' + se.ts/1000*INTERVAL '1 second') AS start_time, 
                            se.userId AS user_id, se.level, ss.song_id, 
                            ss.artist_id, se.sessionId AS session_id, 
                            se.location, se.userAgent AS user_agent 
                            FROM stage_events se 
                            JOIN stage_songs ss
                            ON se.artist = ss.artist_name
                            AND se.song = ss.title
                            AND se.length = ss.duration
                            WHERE se.page='NextSong'
                        """)

user_table_insert = ("""INSERT INTO users SELECT DISTINCT userId AS user_id, 
                        FirstName AS first_name, lastName AS last_name, gender,
                        level FROM stage_events WHERE user_id IS NOT NULL; 
                        """)
song_table_insert = ("""INSERT INTO songs SELECT DISTINCT song_id, title, artist_id, year, 
                        duration FROM stage_songs WHERE song_id IS NOT NULL;
                    """)

artist_table_insert = ("""INSERT INTO artists SELECT DISTINCT artist_id, artist_name AS name,
                        artist_location AS location, artist_lattitude AS lattitude, 
                        artist_longitude AS longitude
                        FROM stage_songs 
                        WHERE artist_id IS NOT NULL;
                        """)

time_table_insert = ("""INSERT INTO times SELECT DISTINCT start_time, 
                        EXTRACT(HOUR FROM start_time) AS hour,
                        EXTRACT(DAY FROM start_time) AS day,
                        EXTRACT(WEEK FROM start_time) AS week,
                        EXTRACT(MONTH FROM start_time) AS month,
                        EXTRACT(YEAR FROM start_time) AS year,
                        EXTRACT(DOW FROM start_time) AS weekday
                        FROM songplays
                        WHERE start_time is not null;
                    """)

# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, song_table_drop, artist_table_drop, time_table_drop, songplay_table_drop, user_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]
